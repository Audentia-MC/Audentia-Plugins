package fr.audentia.core.domain.bank;

import fr.audentia.players.domain.model.Role;
import fr.audentia.players.domain.model.balance.Balance;
import fr.audentia.players.domain.teams.RolesRepository;
import fr.audentia.players.domain.teams.Team;
import fr.audentia.players.domain.teams.TeamsManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.awt.Color;
import java.util.HashMap;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BankInventoryOpenTest {

    @Mock
    private TeamsManager teamsManager;

    @Mock
    private RolesRepository rolesRepository;

    @Mock
    private BankInventory bankInventory;

    private BankInventoryOpen bankInventoryOpen;

    @BeforeEach
    void setUp() {
        bankInventoryOpen = new BankInventoryOpen(teamsManager, bankInventory, rolesRepository);
    }

    @Test
    @DisplayName("openInventory should call bankInventory and return default message when player is a player")
    void openInventory_shouldOpenInventory_whenUserIsPlayer() {

        when(rolesRepository.getRole(any())).thenReturn(new Role(false, true, 0));
        when(teamsManager.getTeamOfPlayer(any())).thenReturn(new Team(Color.RED, new Balance(0), new HashMap<>()));

        String result = bankInventoryOpen.openInventory(any());

        assertThat(result).isEqualTo("<success>Bienvenue dans la banque.");
        verify(bankInventory, times(1)).open(any(), eq(Color.RED));
    }

    @Test
    @DisplayName("openInventory should call bankInventory and return staff message when player is a staff member")
    void openInventory_shouldOpenInventory_whenUserIsStaff() {

        when(rolesRepository.getRole(any())).thenReturn(new Role(true, false, 0));
        when(teamsManager.getTeamOfPlayer(any())).thenReturn(new Team(Color.RED, new Balance(0), new HashMap<>()));

        String result = bankInventoryOpen.openInventory(any());

        assertThat(result).isEqualTo("<success>Bienvenue dans la banque fictive.");
        verify(bankInventory, times(1)).open(any(), eq(Color.RED));
    }

    @Test
    @DisplayName("openInventory shouldn't call bankInventory and return error message when player isn't a player")
    void openInventory_shouldNotOpenInventory_whenUserIsNotPlayer() {

        when(rolesRepository.getRole(any())).thenReturn(new Role(false, false, 0));

        String result = bankInventoryOpen.openInventory(any());

        assertThat(result).isEqualTo("<error>Votre groupe ne peut pas accéder à la banque.");
        verifyNoInteractions(bankInventory);
    }

}
