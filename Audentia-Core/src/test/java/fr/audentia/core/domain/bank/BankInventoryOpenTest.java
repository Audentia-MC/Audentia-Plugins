package fr.audentia.core.domain.bank;

import fr.audentia.players.domain.model.balance.Balance;
import fr.audentia.players.domain.teams.Team;
import fr.audentia.players.domain.teams.TeamsManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.awt.Color;
import java.util.HashMap;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BankInventoryOpenTest {

    private static final UUID FAKE_UUID = UUID.randomUUID();

    @Mock
    private TeamsManager teamsManager;

    @Mock
    private BankInventory bankInventory;

    private BankInventoryOpen bankInventoryOpen;

    @BeforeEach
    void setUp() {
        bankInventoryOpen = new BankInventoryOpen(teamsManager, bankInventory);
    }

    @Test
    @DisplayName("openInventory should call bankInventory and return default message when player is a player")
    void openInventory_shouldOpenInventory_whenUserIsPlayer() {

        Team team = new Team(Color.RED, new Balance(0), new HashMap<>());
        when(teamsManager.isStaff(FAKE_UUID)).thenReturn(false);
        when(teamsManager.isPlayer(FAKE_UUID)).thenReturn(true);
        when(teamsManager.getTeamOfPlayer(FAKE_UUID)).thenReturn(team);

        String result = bankInventoryOpen.openInventory(FAKE_UUID);

        assertThat(result).isEqualTo("<success>Bienvenue dans la banque.");
        verify(bankInventory, times(1)).open(FAKE_UUID, Color.RED);
    }

    @Test
    @DisplayName("openInventory should call bankInventory and return staff message when player is a staff member")
    void openInventory_shouldOpenInventory_whenUserIsStaff() {

        Team team = new Team(Color.RED, new Balance(0), new HashMap<>());
        when(teamsManager.isStaff(FAKE_UUID)).thenReturn(true);
        when(teamsManager.isPlayer(FAKE_UUID)).thenReturn(false);
        when(teamsManager.getTeamOfPlayer(FAKE_UUID)).thenReturn(team);

        String result = bankInventoryOpen.openInventory(FAKE_UUID);

        assertThat(result).isEqualTo("<success>Bienvenue dans la banque fictive.");
        verify(bankInventory, times(1)).open(FAKE_UUID, Color.RED);
    }

    @Test
    @DisplayName("openInventory shouldn't call bankInventory and return error message when player isn't a player")
    void openInventory_shouldNotOpenInventory_whenUserIsNotPlayer() {

        Team team = new Team(Color.RED, new Balance(0), new HashMap<>());
        when(teamsManager.isStaff(FAKE_UUID)).thenReturn(false);
        when(teamsManager.isPlayer(FAKE_UUID)).thenReturn(false);

        String result = bankInventoryOpen.openInventory(FAKE_UUID);

        assertThat(result).isEqualTo("<error>Votre groupe ne peut pas accéder à la banque.");
        verifyNoInteractions(bankInventory);
    }

}
