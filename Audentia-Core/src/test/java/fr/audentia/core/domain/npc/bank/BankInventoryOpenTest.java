package fr.audentia.core.domain.npc.bank;

import fr.audentia.players.domain.teams.Team;
import fr.audentia.players.domain.teams.TeamsManager;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.awt.*;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

public class BankInventoryOpenTest {

    private static final UUID FAKE_UUID = UUID.randomUUID();
    private static final Team FAKE_TEAM = new Team(Color.RED);

    private TeamsManager teamsManager;
    private BankInventory bankInventory;
    private BankInventoryOpen bankInventoryOpen;

    @Before
    public void setUp() {
        teamsManager = Mockito.mock(TeamsManager.class);
        bankInventory = Mockito.mock(BankInventory.class);
        bankInventoryOpen = new BankInventoryOpen(teamsManager, bankInventory);
    }

    @Test
    public void openInventory_shouldOpenInventory_whenUserIsPlayer() {

        when(teamsManager.isStaff(FAKE_UUID)).thenReturn(false);
        when(teamsManager.isPlayer(FAKE_UUID)).thenReturn(true);
        when(teamsManager.getTeamOfPlayer(FAKE_UUID)).thenReturn(FAKE_TEAM);

        String result = bankInventoryOpen.openInventory(FAKE_UUID);

        assertThat(result).isEqualTo("<success>Bienvenue dans la banque.");
        verify(bankInventory, times(1)).open(FAKE_UUID, Color.RED);
    }

    @Test
    public void openInventory_shouldOpenInventory_whenUserIsStaff() {

        when(teamsManager.isStaff(FAKE_UUID)).thenReturn(true);
        when(teamsManager.isPlayer(FAKE_UUID)).thenReturn(false);
        when(teamsManager.getTeamOfPlayer(FAKE_UUID)).thenReturn(FAKE_TEAM);

        String result = bankInventoryOpen.openInventory(FAKE_UUID);

        assertThat(result).isEqualTo("<success>Bienvenue dans la banque fictive.");
        verify(bankInventory, times(1)).open(FAKE_UUID, Color.RED);
    }

    @Test
    public void openInventory_shouldNotOpenInventory_whenUserIsNotPlayer() {

        when(teamsManager.isStaff(FAKE_UUID)).thenReturn(false);
        when(teamsManager.isPlayer(FAKE_UUID)).thenReturn(false);
        when(teamsManager.getTeamOfPlayer(FAKE_UUID)).thenReturn(FAKE_TEAM);

        String result = bankInventoryOpen.openInventory(FAKE_UUID);

        assertThat(result).isEqualTo("<error>Votre groupe ne peut pas accéder à la banque.");
        verifyNoInteractions(bankInventory);
    }

}
