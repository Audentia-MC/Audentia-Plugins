package fr.audentia.core.domain.staff;

import fr.audentia.players.domain.model.Role;
import fr.audentia.players.domain.teams.RolesRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class StaffInventoryOpenTest {

    @Mock
    private RolesRepository rolesRepository;

    @Mock
    private StaffInventoryOpener staffInventoryOpener;

    @Mock
    private WorldPlayerFinder worldPlayerFinder;

    private StaffInventoryOpen staffInventoryOpen;

    @BeforeEach
    void setUp() {
        staffInventoryOpen = new StaffInventoryOpen(rolesRepository, staffInventoryOpener, worldPlayerFinder);
    }

    @Test
    @DisplayName("openInventory should open inventory when target exists and player is staff")
    void openInventory_shouldOpenInventory_whenTargetExistsAndPlayerIsStaff() {

        when(worldPlayerFinder.isInWorld(anyString())).thenReturn(true);
        when(rolesRepository.getRole(any())).thenReturn(new Role(1, true, true, 1));

        String result = staffInventoryOpen.openInventory(UUID.randomUUID(), "Tony");

        verify(staffInventoryOpener, times(1)).openInventory(any(), eq("Tony"));
        assertThat(result).isEqualTo("<success>Ouverture de l'inventaire de gestion de Tony.");
    }

    @Test
    @DisplayName("openInventory should do nothing when target does not exist")
    void openInventory_shouldDoNothing_whenTargetDoesNotExist() {

        when(worldPlayerFinder.isInWorld(anyString())).thenReturn(false);
        when(rolesRepository.getRole(any())).thenReturn(new Role(1, true, true, 1));

        String result = staffInventoryOpen.openInventory(UUID.randomUUID(), "Tony");

        verifyNoInteractions(staffInventoryOpener);
        assertThat(result).isEqualTo("<error>Ce joueur n'existe pas.");
    }

    @Test
    @DisplayName("openInventory should do nothing when player is not staff")
    void openInventory_shouldDoNothing_whenPlayerIsNotStaff() {

        when(worldPlayerFinder.isInWorld(anyString())).thenReturn(true);
        when(rolesRepository.getRole(any())).thenReturn(new Role(1, false, true, 1));

        String result = staffInventoryOpen.openInventory(UUID.randomUUID(), "Tony");

        verifyNoInteractions(staffInventoryOpener);
        assertThat(result).isEqualTo("<error>Vous ne pouvez pas utiliser cette commande.");
    }

}
